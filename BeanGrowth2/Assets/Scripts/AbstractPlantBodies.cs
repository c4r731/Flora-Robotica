//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
namespace AssemblyCSharp
{
	/***
	 * 
	 * AbstractPlantBodies defines the base definitions of any PlantBodies, which will be used in this project.
	 * 
	 */
	public abstract class AbstractPlantBodies : MonoBehaviour
	{
		/**
		 * MasterConfig mc is global configuration and data storage. it also handles the lockings
		 */
		protected MasterConfig mc;

		protected long childCount;

        protected Boolean creeplingContact;

		public enum TriggerEvents {OnEnter, OnExit, OnStay};

		public MasterConfig MC{
			set{ this.mc = value; }
		}

		public long ChildCount
        {
            get
            {
                lock (this)
                {
                    return this.childCount;
                }
            }

            set
            {
                lock (this)
                {
                    if (value != 0)
                    { 
                        if (this.transform.parent.GetComponent<AbstractPlantBodies>() != null && this.transform.parent != mc.PatientZero.transform)
                            this.transform.parent.GetComponent<AbstractPlantBodies>().ChildCount += this.childCount;
                    }
                    this.childCount = value;
                }
            }
		}
		
        public Boolean CreeplingContact
        {
            get {  return this.creeplingContact; }
            set {  this.creeplingContact = value; }
        }

		public AbstractPlantBodies ()
		{
            childCount = 0;
		}

		/**
		 * extra cellular communications and decissions for transporting nutrition and water will be handled here
		 */
		abstract public void expandBandwidth();
		/**
		 * will be called from child object which is starving.
		 */
		abstract public void increaseNutritionGain();
		/**
		 * calculation of rerotation of the body to optimize solar harvesting.
		 */
		abstract public void rotateTowardsLight();

        /**
         * 
         */
        abstract public void WeightBend();

        /**
		 * recursive calculation of rotateTowardsLight
		 * 
		 */
        abstract public void rotateTowardsLight(bool rec_run, int rec_val);


        public GameObject getLastChildBody()
        {
            if (this.transform.childCount > 1 && this.transform.GetChild(1).GetComponent<AbstractPlantBodies>() != null )
            {
                return this.transform.GetChild(1).gameObject;
            }
            else
            {
                return this.gameObject; 
            }
        }
    }
}

